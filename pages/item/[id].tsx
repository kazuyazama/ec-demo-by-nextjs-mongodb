import Head from "next/head";
import Image from "next/image";
import { Inter } from "next/font/google";
import {
  GetServerSideProps,
  GetStaticPaths,
  GetStaticProps,
  NextPage,
} from "next";
import { ReadSingleDataType } from "@/utils/types";
import Link from "next/link";
import { Options, Splide, SplideSlide } from "@splidejs/react-splide";
import "@splidejs/react-splide/css";
import { createRef, ReactNode, useEffect } from "react";

const inter = Inter({ subsets: ["latin"] });

const ReadSingleItem: NextPage<ReadSingleDataType> = ({ singleItem }) => {
  const mainRef = createRef<Splide>();
  const thumbsRef = createRef<Splide>();

  console.log(singleItem);

  const { image, image2, image3, ...props } = singleItem;

  console.log(props);

  const imageArray = [image, image2, image3];

  useEffect(() => {
    function componentDidMount(): void {
      if (mainRef.current && thumbsRef.current && thumbsRef.current.splide) {
        mainRef.current.sync(thumbsRef.current.splide);
      }
    }
    componentDidMount();
  }, []);

  /**
   * Render slides.
   *
   * @return Slide nodes.
   */
  function renderSlides(): ReactNode[] {
    return imageArray.map(
      (slide, index) =>
        slide && (
          <SplideSlide key={index}>
            <Image
              src={slide}
              alt={`${props.title}${index + 1}`}
              width={750}
              height={500}
              className="h-72 w-full rounded-xl object-cover lg:h-[540px]"
            />
          </SplideSlide>
        )
    );
  }

  /**
   * Render the component.
   *
   * @return A React node.
   */

  const mainOptions: Options = {
    type: "loop",
    perPage: 1,
    perMove: 1,
    gap: "1rem",
    pagination: false,
    height: "30rem",
    width: "100%",
  };

  const thumbsOptions: Options = {
    type: "slide",
    rewind: true,
    gap: "1rem",
    pagination: false,
    fixedWidth: 110,
    fixedHeight: 70,
    cover: true,
    focus: "center",
    isNavigation: true,
    arrows: false,
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <section>
        <div className="relative mx-auto max-w-screen-xl px-4 py-8">
          <div className="flex justify-between items-center">
            <div>
              <h1 className="text-2xl font-bold lg:text-3xl">
                {singleItem.title}
              </h1>

              <p className="mt-1 text-sm text-gray-500">SKU: #012345</p>
            </div>

            <div className=" flex gap-5">
              <Link href={`/item/update/${singleItem._id}`}>アイテム編集</Link>
              <Link href={`/item/delete/${singleItem._id}`}>アイテム削除</Link>
            </div>
          </div>

          <div className="grid gap-8 lg:grid-cols-4 lg:items-center">
            <div className="lg:col-span-3">
              <div className="relative mt-4">
                <Splide
                  options={mainOptions}
                  ref={mainRef}
                  aria-labelledby="thumbnail-slider-example"
                >
                  {renderSlides()}
                </Splide>

                <div className="mt-10">
                  <Splide
                    options={thumbsOptions}
                    ref={thumbsRef}
                    aria-label="The carousel with thumbnails. Selecting a thumbnail will change the main carousel"
                  >
                    {renderSlides()}
                  </Splide>
                </div>
              </div>
            </div>

            <div className=" ">
              <form className="space-y-4 lg:pt-8">
                <fieldset>
                  <legend className="text-lg font-bold">Color</legend>

                  <div className="mt-2 flex flex-wrap gap-1">
                    <label htmlFor="color_green" className="cursor-pointer">
                      <input
                        type="radio"
                        id="color_green"
                        name="color"
                        className="peer sr-only"
                        checked
                      />

                      <span className="block h-6 w-6 rounded-full border border-gray-200 bg-green-700 ring-1 ring-transparent ring-offset-1 peer-checked:ring-gray-300"></span>
                    </label>

                    <label htmlFor="color_blue" className="cursor-pointer">
                      <input
                        type="radio"
                        id="color_blue"
                        name="color"
                        className="peer sr-only"
                      />

                      <span className="block h-6 w-6 rounded-full border border-gray-200 bg-blue-700 ring-1 ring-transparent ring-offset-1 peer-checked:ring-gray-300"></span>
                    </label>

                    <label htmlFor="color_pink" className="cursor-pointer">
                      <input
                        type="radio"
                        id="color_pink"
                        name="color"
                        className="peer sr-only"
                      />

                      <span className="block h-6 w-6 rounded-full border border-gray-200 bg-pink-700 ring-1 ring-transparent ring-offset-1 peer-checked:ring-gray-300"></span>
                    </label>

                    <label htmlFor="color_red" className="cursor-pointer">
                      <input
                        type="radio"
                        id="color_red"
                        name="color"
                        className="peer sr-only"
                      />

                      <span className="block h-6 w-6 rounded-full border border-gray-200 bg-red-700 ring-1 ring-transparent ring-offset-1 peer-checked:ring-gray-300"></span>
                    </label>

                    <label htmlFor="color_indigo" className="cursor-pointer">
                      <input
                        type="radio"
                        id="color_indigo"
                        name="color"
                        className="peer sr-only"
                      />

                      <span className="block h-6 w-6 rounded-full border border-gray-200 bg-indigo-700 ring-1 ring-transparent ring-offset-1 peer-checked:ring-gray-300"></span>
                    </label>
                  </div>
                </fieldset>

                <fieldset>
                  <legend className="text-lg font-bold">Material</legend>

                  <div className="mt-2 flex flex-wrap gap-1">
                    <label htmlFor="material_cotton" className="cursor-pointer">
                      <input
                        type="radio"
                        id="material_cotton"
                        name="material"
                        className="peer sr-only"
                        checked
                      />

                      <span className="block rounded-full border border-gray-200 px-3 py-1 text-xs peer-checked:bg-gray-100">
                        Cotton
                      </span>
                    </label>

                    <label htmlFor="material_wool" className="cursor-pointer">
                      <input
                        type="radio"
                        id="material_wool"
                        name="material"
                        className="peer sr-only"
                        checked
                      />

                      <span className="block rounded-full border border-gray-200 px-3 py-1 text-xs peer-checked:bg-gray-100">
                        Wool
                      </span>
                    </label>
                  </div>
                </fieldset>

                <div className="rounded border bg-gray-100 p-4">
                  <p className="text-sm">
                    <span className="block">
                      {" "}
                      Pay as low as $3/mo with 0% APR.{" "}
                    </span>

                    <a href="" className="mt-1 inline-block underline">
                      {" "}
                      Find out more{" "}
                    </a>
                  </p>
                </div>

                <div>
                  <p className="text-xl font-bold">
                    ¥{Number(props.price).toLocaleString()}
                  </p>
                </div>

                <button
                  type="submit"
                  className="w-full rounded bg-red-700 px-6 py-3 text-sm font-bold uppercase tracking-wide text-white"
                >
                  Add to cart
                </button>

                <button
                  type="button"
                  className="w-full rounded border border-gray-300 bg-gray-100 px-6 py-3 text-sm font-bold uppercase tracking-wide"
                >
                  Notify when on sale
                </button>
              </form>
            </div>

            <div className="lg:col-span-3">
              <div className="prose max-w-none">
                <p>{singleItem.description}</p>
              </div>
            </div>
          </div>
        </div>
      </section>
    </>
  );
};

export const getServerSideProps: GetServerSideProps<
  ReadSingleDataType
> = async ({ params }) => {
  console.log(params);
  const res = await fetch(`http://localhost:3000/api/item/${params?.id}`);
  const singleItem = await res.json();
  return {
    props: singleItem,
  };
};

export default ReadSingleItem;
